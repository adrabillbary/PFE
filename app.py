import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from io import StringIO

# Configuration de la page
st.set_page_config(
    page_title="Simulation Lotka-Volterra",
    page_icon="üê∫",
    layout="wide"
)

def lotka_volterra_system(t, state, alpha, beta, gamma, delta, K=None):
    """
    Syst√®me d'√©quations diff√©rentielles de Lotka-Volterra avec croissance logistique optionnelle
    
    Args:
        t: temps (non utilis√© dans ce syst√®me autonome)
        state: [x, y] o√π x = proies, y = pr√©dateurs
        alpha: taux de croissance des proies
        beta: taux de pr√©dation
        gamma: taux de mortalit√© des pr√©dateurs
        delta: taux de reproduction des pr√©dateurs via consommation
        K: capacit√© de charge pour les proies (None = croissance exponentielle)
    
    Returns:
        [dx/dt, dy/dt]
    """
    x, y = state
    
    # Croissance des proies avec ou sans capacit√© de charge
    if K is not None:
        # Mod√®le logistique : croissance ralentit quand x approche K
        growth_term = alpha * x * (1 - x/K)
    else:
        # Mod√®le classique : croissance exponentielle
        growth_term = alpha * x
    
    dxdt = growth_term - beta * x * y
    dydt = delta * x * y - gamma * y
    return np.array([dxdt, dydt])

def euler_method(func, y0, t_span, h, *args):
    """
    M√©thode d'Euler explicite pour r√©soudre un syst√®me d'EDO
    
    Args:
        func: fonction d√©finissant le syst√®me d'EDO
        y0: conditions initiales
        t_span: [t0, tf] intervalle de temps
        h: pas de temps
        *args: arguments additionnels pour func
    
    Returns:
        t: array des temps
        y: array des solutions
    """
    t0, tf = t_span
    t = np.arange(t0, tf + h, h)
    n = len(t)
    y = np.zeros((n, len(y0)))
    y[0] = y0
    
    for i in range(1, n):
        # √âviter les valeurs n√©gatives
        y[i-1] = np.maximum(y[i-1], 0.0)
        y[i] = y[i-1] + h * func(t[i-1], y[i-1], *args)
        # Forcer les valeurs positives
        y[i] = np.maximum(y[i], 0.0)
    
    return t, y

def runge_kutta_4(func, y0, t_span, h, *args):
    """
    M√©thode de Runge-Kutta d'ordre 4 pour r√©soudre un syst√®me d'EDO
    
    Args:
        func: fonction d√©finissant le syst√®me d'EDO
        y0: conditions initiales
        t_span: [t0, tf] intervalle de temps
        h: pas de temps
        *args: arguments additionnels pour func
    
    Returns:
        t: array des temps
        y: array des solutions
    """
    t0, tf = t_span
    t = np.arange(t0, tf + h, h)
    n = len(t)
    y = np.zeros((n, len(y0)))
    y[0] = y0
    
    for i in range(1, n):
        # √âviter les valeurs n√©gatives
        y[i-1] = np.maximum(y[i-1], 0.0)
        
        k1 = h * func(t[i-1], y[i-1], *args)
        k2 = h * func(t[i-1] + h/2, y[i-1] + k1/2, *args)
        k3 = h * func(t[i-1] + h/2, y[i-1] + k2/2, *args)
        k4 = h * func(t[i-1] + h, y[i-1] + k3, *args)
        
        y[i] = y[i-1] + (k1 + 2*k2 + 2*k3 + k4) / 6
        # Forcer les valeurs positives
        y[i] = np.maximum(y[i], 0.0)
    
    return t, y

def calculate_oscillation_period(t, x, y):
    """
    Calcule la p√©riode moyenne des oscillations en d√©tectant les maxima locaux
    
    Args:
        t: array des temps
        x: populations de proies
        y: populations de pr√©dateurs
    
    Returns:
        period_x: p√©riode moyenne pour les proies
        period_y: p√©riode moyenne pour les pr√©dateurs
    """
    def find_peaks(signal):
        """Trouve les indices des maxima locaux"""
        peaks = []
        for i in range(1, len(signal) - 1):
            if signal[i] > signal[i-1] and signal[i] > signal[i+1]:
                peaks.append(i)
        return peaks
    
    peaks_x = find_peaks(x)
    peaks_y = find_peaks(y)
    
    period_x = None
    period_y = None
    
    if len(peaks_x) > 1:
        periods_x = [t[peaks_x[i+1]] - t[peaks_x[i]] for i in range(len(peaks_x)-1)]
        period_x = np.mean(periods_x)
    
    if len(peaks_y) > 1:
        periods_y = [t[peaks_y[i+1]] - t[peaks_y[i]] for i in range(len(peaks_y)-1)]
        period_y = np.mean(periods_y)
    
    return period_x, period_y

def create_plots(t, sol, alpha, beta, gamma, delta, K=None, show_vector_field=False):
    """
    Cr√©e les graphiques d'√©volution temporelle et de phase
    
    Args:
        t: array des temps
        sol: solution du syst√®me [x, y]
        alpha, beta, gamma, delta: param√®tres du mod√®le
        K: capacit√© de charge (None si mod√®le classique)
        show_vector_field: afficher le champ de vecteurs sur le diagramme de phase
    
    Returns:
        fig: figure matplotlib
    """
    x, y = sol[:, 0], sol[:, 1]
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # Graphique d'√©volution temporelle
    ax1.plot(t, x, 'b-', label='Proies (x)', linewidth=2)
    ax1.plot(t, y, 'r-', label='Pr√©dateurs (y)', linewidth=2)
    
    # Ajouter ligne de capacit√© de charge si mod√®le logistique
    if K is not None:
        ax1.axhline(y=K, color='blue', linestyle='--', alpha=0.7, label=f'Capacit√© de charge (K={K})')
    
    ax1.set_xlabel('Temps')
    ax1.set_ylabel('Population')
    title = '√âvolution temporelle des populations'
    if K is not None:
        title += ' (Mod√®le logistique)'
    else:
        title += ' (Mod√®le classique)'
    ax1.set_title(title)
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # Diagramme de phase
    if show_vector_field:
        # Cr√©er une grille pour le champ de vecteurs
        x_max = max(np.max(x) * 1.1, 10)
        y_max = max(np.max(y) * 1.1, 10)
        
        # Grille plus dense pour un meilleur rendu
        x_grid = np.linspace(0.1, x_max, 15)
        y_grid = np.linspace(0.1, y_max, 12)
        X_grid, Y_grid = np.meshgrid(x_grid, y_grid)
        
        # Calculer les d√©riv√©es √† chaque point de la grille
        DX = np.zeros_like(X_grid)
        DY = np.zeros_like(Y_grid)
        
        for i in range(X_grid.shape[0]):
            for j in range(X_grid.shape[1]):
                state = np.array([X_grid[i, j], Y_grid[i, j]])
                derivatives = lotka_volterra_system(0, state, alpha, beta, gamma, delta, K)
                DX[i, j] = derivatives[0]
                DY[i, j] = derivatives[1]
        
        # Normaliser les vecteurs pour une meilleure visualisation
        M = np.sqrt(DX**2 + DY**2)
        M[M == 0] = 1  # √âviter la division par z√©ro
        DX_norm = DX / M
        DY_norm = DY / M
        
        # Afficher le champ de vecteurs
        ax2.quiver(X_grid, Y_grid, DX_norm, DY_norm, M, 
                  scale=20, alpha=0.6, cmap='viridis', 
                  width=0.003, headwidth=3, headlength=4)
    
    # Trajectoire de phase
    ax2.plot(x, y, 'g-', linewidth=2.5, alpha=0.8, label='Trajectoire')
    ax2.plot(x[0], y[0], 'go', markersize=8, label='Point initial')
    ax2.plot(x[-1], y[-1], 'ro', markersize=8, label='Point final')
    
    # Point d'√©quilibre th√©orique (si pas de capacit√© de charge)
    if K is None:
        x_eq = gamma / delta
        y_eq = alpha / beta
        ax2.plot(x_eq, y_eq, 'k*', markersize=12, label=f'√âquilibre ({x_eq:.1f}, {y_eq:.1f})')
    
    ax2.set_xlabel('Proies (x)')
    ax2.set_ylabel('Pr√©dateurs (y)')
    title = 'Diagramme de phase'
    if show_vector_field:
        title += ' avec champ de vecteurs'
    ax2.set_title(title)
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    ax2.set_xlim(0, None)
    ax2.set_ylim(0, None)
    
    plt.tight_layout()
    return fig

def main():
    # Titre principal
    st.title("üê∫ Simulation Lotka-Volterra: Dynamique Proie-Pr√©dateur")
    
    # Section explicative avec √©quations
    st.markdown("## üìê Mod√®le math√©matique")
    st.markdown("""
    Le syst√®me de Lotka-Volterra est d√©crit par les √©quations diff√©rentielles suivantes :
    """)
    
    # Switch pour choisir le mod√®le
    use_logistic = st.checkbox("üîÑ Activer la croissance logistique (capacit√© de charge)", value=False)
    
    if use_logistic:
        st.latex(r'''
        \begin{cases}
        \frac{dx}{dt} = \alpha x \left(1 - \frac{x}{K}\right) - \beta x y \\
        \frac{dy}{dt} = \delta x y - \gamma y
        \end{cases}
        ''')
        
        st.markdown("""
        **Mod√®le avec capacit√© de charge** - La croissance des proies est limit√©e par la capacit√© de charge K.
        """)
    else:
        st.latex(r'''
        \begin{cases}
        \frac{dx}{dt} = \alpha x - \beta x y \\
        \frac{dy}{dt} = \delta x y - \gamma y
        \end{cases}
        ''')
        
        st.markdown("""
        **Mod√®le classique** - Croissance exponentielle illimit√©e des proies en l'absence de pr√©dateurs.
        """)
    
    st.markdown("""
    O√π :
    - **x** : population des proies
    - **y** : population des pr√©dateurs
    - **Œ±** : taux de croissance des proies
    - **Œ≤** : taux de pr√©dation
    - **Œ¥** : taux de reproduction des pr√©dateurs via consommation
    - **Œ≥** : taux de mortalit√© des pr√©dateurs
    """ + ("- **K** : capacit√© de charge maximale pour les proies" if use_logistic else ""))
    
    # Barre lat√©rale pour les param√®tres
    st.sidebar.header("‚öôÔ∏è Param√®tres de simulation")
    
    # Param√®tres biologiques
    st.sidebar.subheader("Param√®tres biologiques")
    alpha = st.sidebar.slider("Œ± - Taux de croissance des proies", 0.1, 2.0, 0.55, 0.01)
    beta = st.sidebar.slider("Œ≤ - Taux de pr√©dation", 0.01, 0.1, 0.028, 0.001)
    delta = st.sidebar.slider("Œ¥ - Taux de reproduction des pr√©dateurs", 0.01, 0.1, 0.021, 0.001)
    gamma = st.sidebar.slider("Œ≥ - Taux de mortalit√© des pr√©dateurs", 0.1, 2.0, 0.75, 0.01)
    
    # Capacit√© de charge (seulement si croissance logistique activ√©e)
    K = None
    if use_logistic:
        K = st.sidebar.slider("K - Capacit√© de charge des proies", 20, 200, 100, 5)
    
    # Conditions initiales
    st.sidebar.subheader("Conditions initiales")
    x0 = st.sidebar.slider("x‚ÇÄ - Population initiale des proies", 1, 100, 30)
    y0 = st.sidebar.slider("y‚ÇÄ - Population initiale des pr√©dateurs", 1, 20, 4)
    
    # Param√®tres num√©riques
    st.sidebar.subheader("Param√®tres num√©riques")
    h = st.sidebar.slider("h - Pas de temps", 0.01, 0.5, 0.1, 0.01)
    T = st.sidebar.slider("T - Dur√©e de simulation", 10, 200, 100, 5)
    method = st.sidebar.selectbox("M√©thode num√©rique", ["Runge-Kutta 4", "Euler"])
    
    # Option pour afficher le champ de vecteurs
    show_vectors = st.sidebar.checkbox("üîç Afficher le champ de vecteurs", value=False, help="Visualise la direction du flux du syst√®me dynamique sur le diagramme de phase")
    
    # Simulation
    y0_vec = np.array([x0, y0])
    t_span = [0, T]
    
    if method == "Runge-Kutta 4":
        t, sol = runge_kutta_4(lotka_volterra_system, y0_vec, t_span, h, alpha, beta, gamma, delta, K)
    else:
        t, sol = euler_method(lotka_volterra_system, y0_vec, t_span, h, alpha, beta, gamma, delta, K)
    
    # Affichage des graphiques
    st.markdown("## üìä R√©sultats de la simulation")
    fig = create_plots(t, sol, alpha, beta, gamma, delta, K, show_vectors)
    st.pyplot(fig)
    
    # Statistiques
    x_vals, y_vals = sol[:, 0], sol[:, 1]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìà Statistiques des proies (x)")
        st.metric("Maximum", f"{np.max(x_vals):.2f}")
        st.metric("Minimum", f"{np.min(x_vals):.2f}")
        st.metric("Moyenne", f"{np.mean(x_vals):.2f}")
    
    with col2:
        st.markdown("### ü¶Ö Statistiques des pr√©dateurs (y)")
        st.metric("Maximum", f"{np.max(y_vals):.2f}")
        st.metric("Minimum", f"{np.min(y_vals):.2f}")
        st.metric("Moyenne", f"{np.mean(y_vals):.2f}")
    
    # Calcul des p√©riodes
    period_x, period_y = calculate_oscillation_period(t, x_vals, y_vals)
    
    st.markdown("### üîÑ Analyse des oscillations")
    col3, col4 = st.columns(2)
    
    with col3:
        if period_x is not None:
            st.metric("P√©riode moyenne (proies)", f"{period_x:.2f} unit√©s de temps")
        else:
            st.metric("P√©riode moyenne (proies)", "Non d√©tectable")
    
    with col4:
        if period_y is not None:
            st.metric("P√©riode moyenne (pr√©dateurs)", f"{period_y:.2f} unit√©s de temps")
        else:
            st.metric("P√©riode moyenne (pr√©dateurs)", "Non d√©tectable")
    
    # Export CSV
    st.markdown("### üíæ Export des donn√©es")
    
    # Cr√©ation du DataFrame
    df = pd.DataFrame({
        'Temps': t,
        'Proies_x': x_vals,
        'Predateurs_y': y_vals
    })
    
    # Bouton de t√©l√©chargement
    csv_buffer = StringIO()
    df.to_csv(csv_buffer, index=False)
    csv_data = csv_buffer.getvalue()
    
    # Nom du fichier avec indication du mod√®le utilis√©
    model_type = "logistique" if K is not None else "classique"
    filename = f"lotka_volterra_{model_type}_alpha{alpha}_beta{beta}_gamma{gamma}_delta{delta}"
    if K is not None:
        filename += f"_K{K}"
    filename += ".csv"
    
    st.download_button(
        label="üì• T√©l√©charger les donn√©es (CSV)",
        data=csv_data,
        file_name=filename,
        mime="text/csv"
    )
    
    # Aper√ßu des donn√©es
    with st.expander("üëÄ Aper√ßu des donn√©es"):
        st.dataframe(df.head(10))
    
    # Section "√Ä propos"
    st.markdown("## üìö √Ä propos du mod√®le Lotka-Volterra")
    
    with st.expander("‚ÑπÔ∏è Explication d√©taill√©e"):
        st.markdown("""
        ### Historique
        Le mod√®le de Lotka-Volterra, d√©velopp√© ind√©pendamment par Alfred Lotka (1925) et Vito Volterra (1926), 
        est l'un des premiers mod√®les math√©matiques d√©crivant la dynamique des populations en interaction.
        
        ### Principe
        Ce mod√®le d√©crit l'√©volution de deux populations :
        - **Les proies** qui croissent exponentiellement en l'absence de pr√©dateurs
        - **Les pr√©dateurs** qui d√©pendent enti√®rement des proies pour survivre
        
        ### √âquations
        - **dx/dt = Œ±x - Œ≤xy** : Les proies croissent √† un taux Œ± mais sont consomm√©es proportionnellement au produit des deux populations
        - **dy/dt = Œ¥xy - Œ≥y** : Les pr√©dateurs se reproduisent proportionnellement √† leur consommation de proies mais meurent √† un taux Œ≥
        
        ### Propri√©t√©s remarquables
        - **Conservation de l'√©nergie** : Le syst√®me poss√®de une int√©grale premi√®re (fonction conserv√©e)
        - **Oscillations p√©riodiques** : Les populations oscillent de mani√®re p√©riodique
        - **Point d'√©quilibre** : Le syst√®me poss√®de un point d'√©quilibre stable en (Œ≥/Œ¥, Œ±/Œ≤)
        
        ### Applications
        Ce mod√®le, bien que simplifi√©, reste fondamental pour comprendre :
        - Les cycles de population dans la nature (lynx-li√®vres au Canada)
        - La dynamique des √©pid√©mies
        - Les mod√®les √©conomiques de concurrence
        - L'√©cologie th√©orique
        
        ### Limitations du mod√®le classique
        - Absence de capacit√© de charge pour les proies
        - Croissance exponentielle irr√©aliste des proies
        - Pas de saturation dans la pr√©dation
        - Mod√®le d√©terministe sans bruit environnemental
        
        ### Am√©liorations avec la croissance logistique
        Le mod√®le avec capacit√© de charge K introduit une limitation r√©aliste :
        - **Croissance ralentie** : Quand x approche K, la croissance des proies diminue
        - **Stabilisation** : Les oscillations peuvent s'amortir vers un point d'√©quilibre
        - **R√©alisme √©cologique** : Reproduit la limitation des ressources dans la nature
        - **Dynamiques diverses** : Selon les param√®tres, on peut observer diff√©rents comportements (oscillations amorties, point fixe stable, etc.)
        
        #### Comparaison des mod√®les
        - **Mod√®le classique** : Oscillations perp√©tuelles d'amplitude constante
        - **Mod√®le logistique** : Peut produire des oscillations amorties convergeant vers un √©quilibre stable
        
        ### Champ de vecteurs
        Le champ de vecteurs sur le diagramme de phase montre :
        - **Direction du flux** : Chaque fl√®che indique la direction d'√©volution du syst√®me √† ce point
        - **Vitesse d'√©volution** : La couleur indique l'intensit√© (vitesse) du changement
        - **Points d'√©quilibre** : Zones o√π les vecteurs convergent ou divergent
        - **Basins d'attraction** : R√©gions qui √©voluent vers le m√™me comportement asymptotique
        
        Cette visualisation aide √† comprendre pourquoi certaines trajectoires sont stables et d'autres instables.
        """)

if __name__ == "__main__":
    main()
